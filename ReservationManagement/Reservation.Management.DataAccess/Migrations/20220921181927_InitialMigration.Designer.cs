// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Reservation.Management.DataAccess;

#nullable disable

namespace Reservation.Management.DataAccess.Migrations
{
    [DbContext(typeof(ReservationManagementContext))]
    [Migration("20220921181927_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Reservation.Management.DataAccess.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "NonClusteredIndex-Name-State-Country");

                    b.ToTable("City", (string)null);
                });

            modelBuilder.Entity("Reservation.Management.DataAccess.Entities.Hotel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("GeoLocation")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Zip")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex(new[] { "Name" }, "NonClusteredIndex-Name-CityId");

                    b.ToTable("Hotel", (string)null);
                });

            modelBuilder.Entity("Reservation.Management.DataAccess.Entities.HotelCategory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("HotelCategory", (string)null);
                });

            modelBuilder.Entity("Reservation.Management.DataAccess.Entities.HotelCategoryRelation", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("HotelCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HotelCategoryId");

                    b.HasIndex("HotelId");

                    b.ToTable("HotelCategoryRelation", (string)null);
                });

            modelBuilder.Entity("Reservation.Management.DataAccess.Entities.HotelContactInfo", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.ToTable("HotelContactInfo", (string)null);
                });

            modelBuilder.Entity("Reservation.Management.DataAccess.Entities.HotelFacility", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1024)");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.ToTable("HotelFacility", (string)null);
                });

            modelBuilder.Entity("Reservation.Management.DataAccess.Entities.HotelGallery", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("BlobImageUri")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2048)");

                    b.Property<string>("Description")
                        .HasMaxLength(2048)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2048)");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.ToTable("HotelGallery", (string)null);
                });

            modelBuilder.Entity("Reservation.Management.DataAccess.Entities.HotelService", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(2048)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2048)");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.ToTable("HotelService", (string)null);
                });

            modelBuilder.Entity("Reservation.Management.DataAccess.Entities.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CanceledAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Observations")
                        .HasMaxLength(1024)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1024)");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("datetime");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ReservationId" }, "NonClusteredIndex-HotelId-Status-IssuedAt");

                    b.ToTable("Invoice", (string)null);
                });

            modelBuilder.Entity("Reservation.Management.DataAccess.Entities.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Observations")
                        .HasMaxLength(2048)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2048)");

                    b.Property<string>("PaymentMethodInfo")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("PaymentMethodType")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "Status" }, "NonClusteredIndex-StartDate-EndDate-Status-UserId");

                    b.ToTable("Reservation", (string)null);
                });

            modelBuilder.Entity("Reservation.Management.DataAccess.Entities.ReservationHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1024)");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReservationId");

                    b.ToTable("Reservation_History", (string)null);
                });

            modelBuilder.Entity("Reservation.Management.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("Reservation.Management.DataAccess.Entities.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Action")
                        .HasColumnType("int");

                    b.Property<bool>("Allowed")
                        .HasColumnType("bit");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermission", (string)null);
                });

            modelBuilder.Entity("Reservation.Management.DataAccess.Entities.Room", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<decimal>("CurrentPrice")
                        .HasColumnType("money");

                    b.Property<int?>("Floor")
                        .HasColumnType("int");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<int>("MaxCapacity")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "HotelId" }, "NonClusteredIndex-HotelId-Status-Number-Type");

                    b.ToTable("Room", (string)null);
                });

            modelBuilder.Entity("Reservation.Management.DataAccess.Entities.RoomReservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal?>("DiscountPrice")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("Discount_Price");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReservationId");

                    b.ToTable("RoomReservation", (string)null);
                });

            modelBuilder.Entity("Reservation.Management.DataAccess.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Passoword")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Reservation.Management.DataAccess.Entities.UserContactInfo", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("UserContactInfo", (string)null);
                });

            modelBuilder.Entity("Reservation.Management.DataAccess.Entities.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<string>("HomePhone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("IdType")
                        .HasColumnType("int");

                    b.Property<string>("IdValue")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Zip")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId");

                    b.ToTable("UserProfile", (string)null);
                });

            modelBuilder.Entity("Reservation.Management.DataAccess.Entities.Hotel", b =>
                {
                    b.HasOne("Reservation.Management.DataAccess.Entities.City", "City")
                        .WithMany("Hotels")
                        .HasForeignKey("CityId")
                        .IsRequired()
                        .HasConstraintName("FK_Hotel_City");

                    b.Navigation("City");
                });

            modelBuilder.Entity("Reservation.Management.DataAccess.Entities.HotelCategoryRelation", b =>
                {
                    b.HasOne("Reservation.Management.DataAccess.Entities.HotelCategory", "HotelCategory")
                        .WithMany("HotelCategoryRelations")
                        .HasForeignKey("HotelCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_HotelCategoryRelation_HotelCategory");

                    b.HasOne("Reservation.Management.DataAccess.Entities.Hotel", "Hotel")
                        .WithMany("HotelCategoryRelations")
                        .HasForeignKey("HotelId")
                        .IsRequired()
                        .HasConstraintName("FK_HotelCategoryRelation_Hotel");

                    b.Navigation("Hotel");

                    b.Navigation("HotelCategory");
                });

            modelBuilder.Entity("Reservation.Management.DataAccess.Entities.HotelContactInfo", b =>
                {
                    b.HasOne("Reservation.Management.DataAccess.Entities.Hotel", "Hotel")
                        .WithMany("HotelContactInfos")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ContactInfo_Hotel");

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("Reservation.Management.DataAccess.Entities.HotelFacility", b =>
                {
                    b.HasOne("Reservation.Management.DataAccess.Entities.Hotel", "Hotel")
                        .WithMany("HotelFacilities")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Hotel");

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("Reservation.Management.DataAccess.Entities.HotelGallery", b =>
                {
                    b.HasOne("Reservation.Management.DataAccess.Entities.Hotel", "Hotel")
                        .WithMany("HotelGalleries")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_HotelGallery_Hotel");

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("Reservation.Management.DataAccess.Entities.HotelService", b =>
                {
                    b.HasOne("Reservation.Management.DataAccess.Entities.Hotel", "Hotel")
                        .WithMany("HotelServices")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_HotelService_Hotel");

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("Reservation.Management.DataAccess.Entities.Invoice", b =>
                {
                    b.HasOne("Reservation.Management.DataAccess.Entities.Reservation", "Reservation")
                        .WithMany("Invoices")
                        .HasForeignKey("ReservationId")
                        .IsRequired()
                        .HasConstraintName("FK_Invoice_Reservation");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("Reservation.Management.DataAccess.Entities.Reservation", b =>
                {
                    b.HasOne("Reservation.Management.DataAccess.Entities.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Reservation_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Reservation.Management.DataAccess.Entities.ReservationHistory", b =>
                {
                    b.HasOne("Reservation.Management.DataAccess.Entities.Reservation", "Reservation")
                        .WithMany("ReservationHistories")
                        .HasForeignKey("ReservationId")
                        .IsRequired()
                        .HasConstraintName("FK_Reservation_History");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("Reservation.Management.DataAccess.Entities.RolePermission", b =>
                {
                    b.HasOne("Reservation.Management.DataAccess.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RolePermission_Role");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Reservation.Management.DataAccess.Entities.Room", b =>
                {
                    b.HasOne("Reservation.Management.DataAccess.Entities.Hotel", "Hotel")
                        .WithMany("Rooms")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Room_Hotel");

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("Reservation.Management.DataAccess.Entities.RoomReservation", b =>
                {
                    b.HasOne("Reservation.Management.DataAccess.Entities.Reservation", "Reservation")
                        .WithMany("RoomReservations")
                        .HasForeignKey("ReservationId")
                        .IsRequired()
                        .HasConstraintName("FK_RoomReservation_Reservation");

                    b.HasOne("Reservation.Management.DataAccess.Entities.Room", "ReservationNavigation")
                        .WithMany("RoomReservations")
                        .HasForeignKey("ReservationId")
                        .IsRequired()
                        .HasConstraintName("FK_RoomReservation_Room");

                    b.Navigation("Reservation");

                    b.Navigation("ReservationNavigation");
                });

            modelBuilder.Entity("Reservation.Management.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Reservation.Management.DataAccess.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_User_Role");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Reservation.Management.DataAccess.Entities.UserContactInfo", b =>
                {
                    b.HasOne("Reservation.Management.DataAccess.Entities.UserProfile", "Profile")
                        .WithMany("UserContactInfos")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ContactInfo_Profile");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Reservation.Management.DataAccess.Entities.UserProfile", b =>
                {
                    b.HasOne("Reservation.Management.DataAccess.Entities.City", "City")
                        .WithMany("UserProfiles")
                        .HasForeignKey("CityId")
                        .IsRequired()
                        .HasConstraintName("FK_UserProfile_City");

                    b.HasOne("Reservation.Management.DataAccess.Entities.User", "User")
                        .WithMany("UserProfiles")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserProfile_User");

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Reservation.Management.DataAccess.Entities.City", b =>
                {
                    b.Navigation("Hotels");

                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("Reservation.Management.DataAccess.Entities.Hotel", b =>
                {
                    b.Navigation("HotelCategoryRelations");

                    b.Navigation("HotelContactInfos");

                    b.Navigation("HotelFacilities");

                    b.Navigation("HotelGalleries");

                    b.Navigation("HotelServices");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Reservation.Management.DataAccess.Entities.HotelCategory", b =>
                {
                    b.Navigation("HotelCategoryRelations");
                });

            modelBuilder.Entity("Reservation.Management.DataAccess.Entities.Reservation", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("ReservationHistories");

                    b.Navigation("RoomReservations");
                });

            modelBuilder.Entity("Reservation.Management.DataAccess.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Reservation.Management.DataAccess.Entities.Room", b =>
                {
                    b.Navigation("RoomReservations");
                });

            modelBuilder.Entity("Reservation.Management.DataAccess.Entities.User", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("Reservation.Management.DataAccess.Entities.UserProfile", b =>
                {
                    b.Navigation("UserContactInfos");
                });
#pragma warning restore 612, 618
        }
    }
}
